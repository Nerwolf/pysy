include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
   - build
   - test
   - release
   - deploy

build-frontend-code-job:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо 
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:        
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/pysy-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/pysy-frontend:$CI_COMMIT_SHA

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - ls -la
    - cd frontend
    - ls -la
    - sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_FRONTEND} -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.sources=. -Dsonar.login=${SONAR_LOGIN}        
  needs:
     - build-frontend-code-job 

upload-frontend-release:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/pysy-frontend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/pysy-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/pysy-frontend:$VERSION
    - docker push $CI_REGISTRY_IMAGE/pysy-frontend:$VERSION
  needs:
    - sonarqube-frontend-sast

deploy:
  stage: deploy
  image: alpine:3.15.0
  when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";  
       export "REGISTRY_USER=$CI_REGISTRY_USER";
       export "REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD";
       export "REGISTRY=$CI_REGISTRY";
      /bin/bash -s " < ./frontend/frontend_deploy.sh 
  needs:
    - upload-frontend-release


